trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - .gitignore
    - screenshots/

stages:
- stage: Provision
  jobs:
  - job: provision_azure_infrastructure
    displayName: Provision Azure Infrastructure
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: DownloadSecureFile@1
      name: tfvardef
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars' 

    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'known_hosts'
        sshPublicKey: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDBDTjvuUwKp9tSdFrq9rtdjVTj8eO3oAigT5XbyNSPKaN4N6kZesvn9IJSjAo4DT5UTOrjNVpARjRuQFsyNo9ko7Ig6RnmAOYt3i7iw5IyeyHRa+OengzGrPVI1kiiN0vlezUJa89Gzf9rUR6X0r9WhonxRB9J26MS0HuQleMFBUGgeQU37kftvaSAP+f0L1pbMz2+/3k8nYvix9To9sDUPCOJ827VG4cBne5bUU1lWyd00xROPboQMX2VTSLsS2iHHmsZfdARm6zAO/RCXTRwc8+MGxw2TkiwHxYNDFQA0QnjC9Se4SMVPtGZEz9Mhimi9hJTk5/uT7OMpE4hmj3v
        sshKeySecureFile: 'udacity_azure'

    - bash: |
        echo Creating dir structure
        mkdir -p $(System.DefaultWorkingDirectory)/terraform/environment/test
        echo Copying terraform.tfvars
        cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environment/test
        ls -lrt $(System.DefaultWorkingDirectory)/terraform/environment/test
      displayName: Copy & List terraform.tfvars

    - bash: |
        echo Pipeline workspace dir is $(Pipeline.Workspace)
        echo Terraform variable definition file is $(tfvardef.secureFilePath)
        cd $(Agent.TempDirectory)
        pwd
        ls -la
        cat udacity_azure.pub
        cd ~/.ssh/
        pwd
        ls -lart
        cat known_hosts
        # $(System.DefaultWorkingDirectory) is equivalent to $(Build.SourcesDirectory)
        cd $(System.DefaultWorkingDirectory)  
        pwd
        ls -la
      displayName: Verify pre-build environment

    # install Terraform Azure Pipelines Extension by Microsoft DevLabs
    # https://marketplace.visualstudio.com/items?itemName=ms-devlabs.custom-terraform-tasks
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '0.13.5'

    - task: TerraformTaskV1@0
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'tstate-sc'
        backendAzureRmResourceGroupName: 'tstate-rg'
        backendAzureRmStorageAccountName: 'tstatestact01'
        backendAzureRmContainerName: 'tstate-container'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'

    - task: TerraformTaskV1@0
      displayName: Terraform Apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: |
          -auto-approve 
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        environmentServiceNameAzureRM: 'tstate-sc'

  - deployment: deployment_vm
    displayName: Deploy Virtual Machine
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              pwd
              hostname
              uname -a
              cat /etc/*-release
              sudo apt-get install software-properties-common -y
              sudo apt-add-repository universe -y
              sudo apt-get update -y
              sudo apt-get install python3-pip -y
              sudo apt-get install unzip -y
              sudo apt-get install -y chromium-browser
              sudo apt-get install -y chromium-chromedriver
              python3 -m pip install --upgrade pip
              pip3 install selenium
              python3 -V
              pip3 -V
              /usr/bin/chromium-browser --version
              /usr/bin/chromedriver --version

- stage: Destroy
  jobs:
  - job: destroy_azure_infrastructure
    displayName: Destroy Azure Infrastructure
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: DownloadSecureFile@1
      name: tfvardef
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars' 

    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'known_hosts'
        sshPublicKey: $(aps-tf-public-key)
        sshKeySecureFile: 'udacity_azure'

    - bash: |
        cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environment/test
      displayName: Copy terraform.tfvars

    # install Terraform Azure Pipelines Extension by Microsoft DevLabs
    # https://marketplace.visualstudio.com/items?itemName=ms-devlabs.custom-terraform-tasks
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '0.13.5'

    - task: TerraformTaskV1@0
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'tstate-sc'
        backendAzureRmResourceGroupName: 'tstate-rg'
        backendAzureRmStorageAccountName: 'tstatestact01'
        backendAzureRmContainerName: 'tstate-container'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'

    - task: TerraformTaskV1@0
      displayName: Terraform Destroy
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        commandOptions: |
          -auto-approve 
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        environmentServiceNameAzureRM: 'tstate-sc'